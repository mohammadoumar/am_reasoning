*** Prompt Nr 1 for AM Pipline ***

instruction = """### You are an expert in Argument Mining tasked with analyzing argumentative structures in essays. 

INPUT:
You will receive:
- An essay title.
- The complete essay text.
- An enumerated list of identified arguments extracted from the essay.

TASK 1: Argument Classification
- Classify each argument in the essay into one of the following categories: "MajorClaim"(M), "Claim"(C) or "Premise"(P).
- You must return a list of argument types in following JSON format: {"argument_types": [argument_types (str), argument_types (str), ..., argument_types (str)]}

TASK 2: Argument Relations
- Identify relationships between arguments by determining which arguments support or attack other arguments. 
- You must return a list of argument pairs in following JSON format: {"related_arguments": [(target_index, source_index), (target_index, source_index), ...]}.
- Note: Indices are 1-based, referring to the position in the provided arguments list.

TASK 3: Relation Classification
- For each related argument pair identified in Task 2, classify the relationship as either: "Support"(S) or "Attack"(A). 
- You must return a list of relation types in following JSON format: {"relation_types": [relation_type (str), relation_type (str), ..., relation_type (str)]}
- Each element corresponds to the relationship at the same position in the related_arguments list.

Example:

### Output:
{"argument_types": ['M', 'M', 'C', 'P', 'P', 'P', 'C', 'P', 'P', 'P', 'C']}
{"related_arguments": [(4, 3), (5, 3), (6, 3), (10, 11), (9, 11), (8, 7)]}
{"relation_types": ['S', 'S', 'S', 'S', 'S', 'S']}

"""

NOTE: add the paragraph point to this prompt. i.e. only arguments in the same paragraph can be related.

-----------------------------------------------------------------------------------------------------------

*** Prompt Nr 2 for AM Pipeline (w the paragraph and combined ARIC task) ***

instruction = """### You are an expert in Argument Mining tasked with analyzing argumentative structures in essays. 

INPUT:
You will receive:
- An essay title.
- The complete essay text.
- An enumerated list of identified arguments extracted from the essay.

TASK 1: Argument Classification
- Classify each argument in the essay into one of the following categories: "MajorClaim"(M), "Claim"(C) or "Premise"(P).
- You must return a list of argument types in following JSON format: {"argument_types": [argument_types (str), argument_types (str), ..., argument_types (str)]}

TASK 2: Argument Relations Identification and Classification
- Identify relationships between arguments by determining which arguments support or attack other arguments.
- For each related argument pair, classify the relationship as either: "Support"(S) or "Attack"(A).
- IMPORTANT: Only arguments that appear in the same line in the essay can be related.
- You must return a list of triplets in the following JSON format: {"argument_relations": [(target_index (int), source_index (int), relation_type (str)), (target_index (int), source_index (int), relation_type (str)), ...]}
- Note: Indices are 1-based, referring to the position in the provided arguments list.

Example:

### Output:
{"argument_types": ['M', 'M', 'C', 'P', 'P', 'P', 'C', 'P', 'P', 'P', 'C']}
{"argument_relations": [(4, 3, 'S'), (5, 3, 'A'), (6, 3, 'S'), (10, 11, 'S'), (9, 11, 'A'), (8, 7, 'S')]}

"""

------------------------------------------------------------------------------------------------------------------------

*** Prompt Nr 3 for AM Pipeline (w class explanations from Claude) *** 

instruction = """### You are an expert in Argument Mining tasked with analyzing argumentative structures in essays. 

INPUT:
You will receive:
- An essay title.
- The complete essay text.
- An enumerated list of identified arguments extracted from the essay.

TASK 1: Argument Classification
- Classify each argument in the essay into one of the following categories: "MajorClaim"(M), "Claim"(C) or "Premise"(P).
- MajorClaim (M): The main stance or position that the author wants to prove in the essay. Usually appears in the introduction and/or conclusion.
- Claim (C): A statement that directly supports or attacks the major claim. Claims are controversial assertions that require further evidence.
- Premise (P): A reason or evidence that directly supports or attacks a claim or another premise.
- You must return a list of argument types in following JSON format: {"argument_types": [argument_types (str), argument_types (str), ..., argument_types (str)]}

TASK 2: Argument Relations Identification and Classification
- Identify relationships between arguments by determining which arguments support or attack other arguments.
- For each related argument pair, classify the relationship as either: "Support"(S) or "Attack"(A).
- IMPORTANT: Only arguments that appear in the same line in the essay can be related.
- You must return a list of triplets in the following JSON format: {"argument_relations": [(target_index (int), source_index (int), relation_type (str)), (target_index (int), source_index (int), relation_type (str)), ...]}
- Note: Indices are 1-based, referring to the position in the provided arguments list.

Example:

### Output:
{"argument_types": ['M', 'M', 'C', 'P', 'P', 'P', 'C', 'P', 'P', 'P', 'C']}
{"argument_relations": [(4, 3, 'S'), (5, 3, 'A'), (6, 3, 'S'), (10, 11, 'S'), (9, 11, 'A'), (8, 7, 'S')]}
"""

-------------------------------------------------------------------------------


*** Prompt Nr 4 for AM Pipeline (experimental) *** 

instruction = """### You are an expert in Argument Mining tasked with analyzing argumentative structures in essays. 

INPUT:
You will receive:
- An essay title.
- The complete essay text.
- An enumerated list of identified arguments extracted from the essay.

TASK 1: Argument Classification
- Classify each argument in the essay into one of the following categories: "MajorClaim"(M), "Claim"(C) or "Premise"(P).
- MajorClaim (M): The main stance or position that the author wants to prove in the essay. Usually appears in the introduction and/or conclusion.
- Claim (C): A statement that directly supports or attacks the major claim. Claims are controversial assertions that require further evidence.
- Premise (P): A reason or evidence that directly supports or attacks a claim or another premise.
- You must return a list of argument types in following JSON format: {"argument_types": [argument_types (str), argument_types (str), ..., argument_types (str)]}

TASK 2: Argument Relations Identification and Classification
- Identify relationships between arguments by determining which arguments support or attack other arguments.
- For each related argument pair, classify the relationship as either: "Support"(S) or "Attack"(A).
- IMPORTANT: Only arguments that appear in the same line in the essay can be related.
- You must return a list of triplets in the following JSON format: {"argument_relations": [(target_index (int), source_index (int), relation_type (str)), (target_index (int), source_index (int), relation_type (str)), ...]}
- Note: Indices are 1-based, referring to the position in the provided arguments list.

Example:

### Output:
{"argument_types": ['M', 'M', 'C', 'P', 'P', 'P', 'C', 'P', 'P', 'P', 'C']}
{"argument_relations": [(4, 3, 'S'), (5, 3, 'A'), (6, 3, 'S'), (10, 11, 'S'), (9, 11, 'A'), (8, 7, 'S')]}

"""

Add: 

{"relation_types": {"Paragraph1" : [],
                "Paragraph2" : [((4, 3), 'S'), ((5, 3), 'S'), ((6, 3), 'S')],
                "Paragraph_3" : [((8, 7), 'S')],
                "Paragraph_4" : [((10, 11), 'S'), ((9, 11), 'S')]}}

                {"relation_types": {"Paragraph1" : [],
                "Paragraph2" : [(4, 3, 'S'), (5, 3, 'S'), (6, 3, 'S')],
                "Paragraph_3" : [(8, 7, 'S')],
                "Paragraph_4" : [(10, 11, 'S'), (9, 11, 'S')]}}